<?php
namespace CG\Web;
use CG\Web as w;
use CG as r;
use CG\DB as db;
use CG\Backend as be;
use CG\Util as u;

require_once __DIR__ . '/txprocessor.interface';

/**
 * @file
 * Class to generate transaction history reports.
 */

class TxHistory implements TxProcessor {
  private $body = '';
  private $uids = [];
//  private $tidValue = '';
  private $dateValue = '';
  private $count = 0;
  private $runBalance = 0;
  private $baseUrl = NULL;
  public $buttons;
  
  public function __construct($uids, $baseUrl) {
    $this->uids = $uids;
    $this->baseUrl = $baseUrl;
  }
  
  /**
   * Called before the first transaction.
   */
  public function hdr() {
    $xid = w\popHelp(t('Tx#'), t('Transaction number'));
    $date = w\popHelp(t('Date'), t('Date transaction was completed'));
    $name = w\popHelp(t('Name'), t('Who did you pay or receive from'));
    $purpose = w\popHelp(t('Purpose'), t('What is the purpose of the transaction (usually the item or service purchased)'));
    $amount = w\popHelp(t('Amount'), t('Amounts you spent or received'));
    /* $fromyou = w\popHelp(t('From You'), t('fromyou')); */
    /* $toyou = w\popHelp(t('To You'), t('toyou')); */
    /* $net = w\popHelp(t('Net'), t('The net change in account balance')); */
    $runBalance = w\popHelp(t('Balance'), t('The balance in the account after this transaction'));
    $buttons = w\popHelp(t('Action'), t('Click a symbol to reverse a transaction'));
    $guts = $this->guts($xid, $date, $name, $purpose, $amount, $runBalance, $buttons);
    $downBtns = ''; foreach (ray('CSV QBO') as $k) $downBtns .= buttino("$this->baseUrl&download=$k", $k, '', '', ray('title', t('Download these transactions in %k format.', compact('k'))));
    $downBtns .= buttino("$this->baseUrl&download=Combo", 'Combo', '', '', ray('title', t('Download (for this period) all invoices and transactions with invoiced members.')));

    $this->body = <<<EOF
<div id="txlist" class="table table-striped">
  <div id="txs-links" class="row">
    <div class="showMore col-xs-3">
      <a title="Show more transactions per page"><span class="glyphicon glyphicon-plus"></span>Show more</a>
    </div>
    <div class="dates col-xs-2">
      <a title="Select dates to show"><span class="glyphicon glyphicon-calendar"></span>Dates</a>
    </div>
    <div class="download col-xs-3">
      <span class="glyphicon glyphicon-download-alt"></span>Download<span>$downBtns</span>
    </div>
    <div class="totals col-xs-2">
      <a data-toggle="modal" data-target="#txs-totals" title="Show totals for the selected period"><span class="glyphicon glyphicon-usd"></span>Totals</a>
    </div>
    <div class="nav col-xs-1">
      <a class="prevPage" title="Previous Page"><span class="glyphicon glyphicon-triangle-left"></span></a>
      <a class="nextPage" title="Next Page"><span class="glyphicon glyphicon-triangle-right"></span></a>
    </div>
  </div>
  <div class="row txRow thead head page--1 PAGE--1">
$guts
  </div>
  <div class="tbody">
EOF;
  }

  /**
   * Called before each transaction.
   * @param assoc $info: all of the data for this entry (includes transaction data)
   */
  public function txnHdr($info, $extraClass = '') {
    global $mya;
    
    $this->dateValue = fmtDt($info['created'], 'MM/dd/yy');
    $this->runBalance = u\fmtAmt($info['balance'], '');

    $class = "row txRow ";
    $class .= 'page-' . floor($this->count / MIN_TX_ROWS);
    $class .= ' PAGE-' . floor($this->count / NORMAL_TX_ROWS);
    $this->body .= "<tbody class=\"$class\">\n";
    $xid = $info['xid'];

    // I am payee and amount > 0 or I am payer and amount < 0
    $reallyToMe = $info['myAmount'] > 0;

    if ((($mya->can($reallyToMe ? B_BUY : B_SELL) and !$info['banking']) or $mya->admReverseBankTx) and !$info['reversedBy'] and !($info['isDisputed'] and !$reallyToMe)) {
      $this->buttons = w\btn("$this->baseUrl&undo=$xid", ' X ', 'primary', 'xs', ['title'=>t('Reverse')]);
    } else $this->buttons = '';
    
    $pageClasses = 'page-' . floor($this->count / MIN_TX_ROWS) . ' PAGE-' . floor($this->count / NORMAL_TX_ROWS);
    $disputedClass = ($info['isDisputed']) ? ' disputed' : '';
    $this->body .= <<<EOF
      <div class="row txRow $pageClasses$disputedClass">
        <div class="sepRow">
          <div class="separator$extraClass"></div>
        </div>
EOF;
  }
//            <div class="sepBlank"></div>


  /**
   * Called for each entry of a transaction.
   * @param assoc $info: all of the data for this entry (includes transaction data)
   * @param int $parity: mod 2 of entry number for this transaction, starting with 0
   */
  public function processEntry($info, $parity) {
    if (in_array($info['uid'], $this->uids)) return;
    extract(just('name description amount xid banking', $info));
    $amount = u\fmtAmt($amount, '');
    if (!$this->dateValue) $xid = '';
    $guts = $this->guts($xid, $this->dateValue, $name, $description, $amount, $this->runBalance, $this->buttons);
    $parity = $parity ? ' odd' : ' even';

    $this->body .= <<<EOF
<div class="txentry$parity">
$guts
</div>
EOF;

    $this->dateValue = $this->runBalance = $this->buttons = ''; // don't repeat these for auxiliary entries
  }

  private function guts($xid, $date, $name, $purpose, $amount, $runBalance, $buttons) {
    foreach (ray('xid date runBalance buttons') as $k) if (empty($$k)) $$k = '&nbsp;';

    $return = u\pry($this->baseUrl);
    if (is_numeric($xid)) $xid = w\lnk(BASE_URL . "/history/transaction/xid=$xid&return=$return", $xid, ['title' => t('Details')]);

    return <<< X
  <div class="xid-date col-xs-2">
    <div class="xid col-sm-5">$xid</div>
    <div class="date col-sm-7">$date</div>
  </div>
  <div class="name-purpose col-xs-6">
    <div class="name col-sm-6">$name</div>
    <div class="purpose col-sm-6">$purpose</div>
  </div>
  <div class="amount-runBalance col-xs-3">
    <div class="amount col-sm-5"><div>$amount</div></div>
    <div class="runBalance col-sm-7"><div>$runBalance</div></div>
  </div>
  <div class="buttons col-xs-1">$buttons</div>
X;
  }

  /**
   * Called after each transaction.
   * @param assoc $info: all of the data for this entry (includes transaction data)
   */
  public function txnFtr($info) {
    $this->body .= "</div>\n";
    $this->count += 1;
  }

  /**
   * Called after the last transaction.
   */
  public function ftr() {
    if ($this->count < 1) {
      $this->body .= '<div><div colspan=6>' . t('no txs') . '</div></div>';
    }
    $this->body .= "</div>\n</div>\n</div>\n";
  }

  /**
   * Get the built HTML
   */
  public function getBody() {
    return w\item($this->body);
  }
}
