<?php
/**
 * @file
 * rPos Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured that no functions will be deleted and the compiler will
 * not alter code within a function unless you make it look like a function header.
 *
 * You may also add statements just below this header (for example "use" and "require_once").
 */

use CG as r;
use CG\DB as db;
use CG\Testing as t;
use CG\Util as u;
use CG\Backend as be;

require_once __DIR__ . '/../defs.inc';

if (basename($_SERVER['SCRIPT_FILENAME']) != 'compile.php') {
  require_once __DIR__ . '/../cg.inc';
  require_once __DIR__ . '/../cg-testing.inc';
}

/**
 * Add additional setup for any or all features or tests
 */
function extraSetup() {
  t\clear(TX_APP);
}

/**
 * members: (ARG)
 *
 * in: MAKE identity Setup
 *     TEST test TheAppAsksToInitializeTheTestData
 *     MAKE test TheAppAsksToInitializeTheTestDataWhenThereArePreviousTransactions
 *     MAKE test TheAppAsksUsForTransactionData
 *     MAKE accounts Setup
 *     MAKE info Setup
 *     MAKE comments Setup
 *     MAKE transactions Setup
 *     MAKE idphoto Setup
 */
function members($list) {return t\members($list);}

/**
 * balances: (ARG)
 *
 * in: TEST info Setup
 */
function balances($list) {return t\balances($list);}

/**
 * these (ARG): (ARG)
 *
 * in: MAKE identity Setup
 *     TEST test TheAppAsksToInitializeTheTestData
 *     BOTH test TheAppAsksToInitializeTheTestDataWhenThereArePreviousTransactions
 *     MAKE test TheAppAsksUsForTransactionData
 *     MAKE accounts Setup
 *     MAKE info Setup
 *     MAKE comments Setup
 *     MAKE transactions Setup
 *     TEST transactions TheAppAsksToChargeACustomer
 *     TEST transactions TheAppAsksToPayACustomer
 *     BOTH transactions TheAppAsksToUndoAChargeToACustomer
 *     BOTH transactions TheAppAsksToUndoAPaymentToACustomer
 *     TEST transactions TheAppAsksToChargeACustomerAndAddATip
 *     TEST transactions TheAppAsksToPayACustomerAndAddATip
 *     TEST transactions TheAppAsksToChargeACustomerWithABadOtherIdOffline
 *     MAKE idphoto Setup
 */
function these($thing, $list) {return t\these($thing, $list);}

/**
 * next random code is (ARG)
 *
 * in: MAKE accounts AMemberSignsInToTheAppForAListOfAccountsToChooseFrom
 */
function nextRandomCodeIs($code) {global $nextCode; return $nextCode = $code;}

/**
 * app gets (ARG) with: (ARG)
 *
 * in: 
 */
function appGetsWith($url, $params, $method = 'get') {
  global $testOnly; if ($testOnly) return FALSE;
  $params = $params[0];
  $params['version'] = '4.0.0'; // don't make the tests specify this every time
  t\fixTestVars($params);
  t\fixData($params);
  if ($method == 'get') $_GET = $params; else $_POST = $params;
  return t\memberVisitsPage('?', "api/$url");
}

/**
 * app posts (ARG) with: (ARG)
 *
 * in: MAKE identity TheAppAsksToIdentifyACustomer
 *     MAKE identity TheAppAsksToIdentifyACustomerWithoutAnIdentifier
 *     MAKE identity TheAppAsksToIdentifyACustomerWithABadDeviceIdentifier
 *     MAKE identity TheAppAsksToIdentifyACustomerWithABadActorIdentifier
 *     MAKE identity TheAppAsksToIdentifyACustomerWithABadSecurityCode
 *     MAKE identity TheAppAsksToIdentifyACustomerWithAnIdForAnInactiveAccount
 *     MAKE identity TheAppAsksToIdentifyACustomerWithAnIdForANonexistentAccount
 *     MAKE identity TheAppAsksToIdentifyACustomerWithAReallyBadId
 *     MAKE accounts AMemberSignsInToTheAppForAListOfAccountsToChooseFrom
 *     MAKE accounts AMemberTriesToSignInWithoutAnIdentifier
 *     MAKE accounts AMemberTriesToSignInWithoutAPassword
 *     MAKE accounts AMemberTriesToSignInWithoutANonexistentAccountIdentifier
 *     MAKE accounts AMemberTriesToSignInWithoutATotallyBadIdentifier
 *     MAKE accounts AMemberTriesToSignInWithoutABadPassword
 *     MAKE info TheAppAsksForRecentTransactions
 *     MAKE info TheAppAsksForRecentTransactionsWithAMissingParameter
 *     MAKE info TheAppAsksForRecentTransactionsWithABadActorId
 *     MAKE info TheAppAsksForRecentTransactionsWithABadCount
 *     MAKE info TheAppAsksForRecentTransactionsWithACountOutOfRange
 *     MAKE comments TheAppAsksToSubmitAComment
 *     MAKE comments TheAppAsksToSubmitACommentWithAMissingParameter
 *     MAKE comments TheAppAsksToSubmitACommentWithABadActorId
 *     MAKE transactions TheAppAsksToChargeACustomer
 *     MAKE transactions TheAppAsksToPayACustomer
 *     MAKE transactions TheAppAsksToUndoAChargeToACustomer
 *     MAKE transactions TheAppAsksToUndoAPaymentToACustomer
 *     MAKE transactions TheAppAsksToChargeACustomerAndAddATip
 *     MAKE transactions TheAppAsksToPayACustomerAndAddATip
 *     MAKE transactions TheAppAsksToChargeACustomerWithAMissingParameter
 *     MAKE transactions TheAppAsksToChargeACustomerWithABadActorId
 *     MAKE transactions TheAppAsksToChargeACustomerWithABadOtherId
 *     MAKE transactions TheAppAsksToChargeACustomerWithABadOtherIdOffline
 *     MAKE transactions TheAppAsksToChargeACustomerWithABadAmount
 *     MAKE transactions TheAppAsksToChargeACustomerWithAnAmountOutOfRange
 *     MAKE transactions TheAppAsksToChargeACustomerWithABadDate
 *     MAKE transactions TheAppAsksToChargeACustomerWithADateOutOfRange
 *     MAKE transactions TheAppAsksToChargeACustomerWithABadProof
 *     MAKE transactions TheAppAsksToChargeACustomerWhoHasInsufficientFunds
 *     MAKE idphoto TheAppAsksToShowACustomerIDPhoto
 *     MAKE idphoto TheAppAsksToShowACustomerIDPhotoWithNoOtherId
 *     MAKE idphoto TheAppAsksToShowACustomerIDPhotoWithNoActorId
 *     MAKE idphoto TheAppAsksToShowACustomerIDPhotoWithBadOtherId
 *     MAKE idphoto TheAppAsksToShowACustomerIDPhotoWithBadActorId
 *     MAKE idphoto TheAppAsksToShowACustomerIDPhotoWithBadDeviceId
 */
function appPostsWith($url, $params) {return appGetsWith($url, $params, 'post');}

/**
 * we reply (ARG) with JSON: (ARG)
 *
 * in: TEST identity TheAppAsksToIdentifyACustomer
 *     TEST test TheAppAsksToInitializeTheTestData
 *     TEST accounts AMemberSignsInToTheAppForAListOfAccountsToChooseFrom
 *     TEST transactions TheAppAsksToChargeACustomer
 *     TEST transactions TheAppAsksToPayACustomer
 *     TEST transactions TheAppAsksToUndoAChargeToACustomer
 *     TEST transactions TheAppAsksToUndoAPaymentToACustomer
 *     TEST transactions TheAppAsksToChargeACustomerAndAddATip
 *     TEST transactions TheAppAsksToPayACustomerAndAddATip
 *     TEST transactions TheAppAsksToChargeACustomerWithABadOtherId
 *     TEST transactions TheAppAsksToChargeACustomerWithADateOutOfRange
 *     TEST transactions TheAppAsksToChargeACustomerWhoHasInsufficientFunds
 */
function weReplyWithJSON($wantStatus, $want) {return weReplyWith($wantStatus, $want, TRUE);}

/**
 * var (ARG) is: (ARG)
 *
 * in: 
 */
function varIs($var, $want) {
  global $testOnly, $testVars;
  return $testOnly ? t\eq(t('test Var'), nni($testVars, $var)) : ($testVars[$var] = $want);
}

/**
 * var (ARG) is JSON: (ARG)
 *
 * in: MAKE accounts AMemberSignsInToTheAppForAListOfAccountsToChooseFrom
 *     MAKE info TheAppAsksForRecentTransactions
 */
function varIsJSON($var, $want) {return varIs($var, t\json($want));}

/**
 * var (ARG) is (ARG) encrypted
 *
 * in: 
 */
function varIsEncrypted($var, $want) {return varIs($var, u\b64encode(u\cryPP($want, 'public')));}

/**
 * we reply (ARG) with: (ARG)
 *
 * in: TEST identity TheAppAsksToIdentifyACustomerWithoutAnIdentifier
 *     TEST identity TheAppAsksToIdentifyACustomerWithABadDeviceIdentifier
 *     TEST identity TheAppAsksToIdentifyACustomerWithABadActorIdentifier
 *     TEST identity TheAppAsksToIdentifyACustomerWithABadSecurityCode
 *     TEST identity TheAppAsksToIdentifyACustomerWithAnIdForAnInactiveAccount
 *     TEST identity TheAppAsksToIdentifyACustomerWithAnIdForANonexistentAccount
 *     TEST identity TheAppAsksToIdentifyACustomerWithAReallyBadId
 *     TEST accounts AMemberTriesToSignInWithoutAnIdentifier
 *     TEST accounts AMemberTriesToSignInWithoutAPassword
 *     TEST accounts AMemberTriesToSignInWithoutANonexistentAccountIdentifier
 *     TEST accounts AMemberTriesToSignInWithoutATotallyBadIdentifier
 *     TEST accounts AMemberTriesToSignInWithoutABadPassword
 *     TEST info TheAppAsksForRecentTransactionsWithAMissingParameter
 *     TEST info TheAppAsksForRecentTransactionsWithABadCount
 *     TEST info TheAppAsksForRecentTransactionsWithACountOutOfRange
 *     TEST comments TheAppAsksToSubmitACommentWithAMissingParameter
 *     TEST transactions TheAppAsksToChargeACustomerWithAMissingParameter
 *     TEST transactions TheAppAsksToChargeACustomerWithABadAmount
 *     TEST transactions TheAppAsksToChargeACustomerWithAnAmountOutOfRange
 *     TEST transactions TheAppAsksToChargeACustomerWithABadDate
 *     TEST transactions TheAppAsksToChargeACustomerWithABadProof
 *     TEST idphoto TheAppAsksToShowACustomerIDPhoto
 *     TEST idphoto TheAppAsksToShowACustomerIDPhotoWithNoOtherId
 *     TEST idphoto TheAppAsksToShowACustomerIDPhotoWithNoActorId
 *     TEST idphoto TheAppAsksToShowACustomerIDPhotoWithBadOtherId
 *     TEST idphoto TheAppAsksToShowACustomerIDPhotoWithBadActorId
 *     TEST idphoto TheAppAsksToShowACustomerIDPhotoWithBadDeviceId
 */
function weReplyWith($wantStatus, $want, $json = FALSE) {
  global $testOnly, $testVars; if (!$testOnly) return FALSE; // maybe combine this with weExitShowing?
  if (!$got = t\getExitMsg($gotStatus)) return FALSE;
/**/  db\del('test', "type='echo'"); // reset for subsequent steps
  if (!t\eq('status', u\consta('x', $wantStatus), $gotStatus)) return FALSE;
  if ($json) {
    $want = is_array($want) ? t\json($want[0]) : $want;
  } else $want = is_array($want) ? $want[0] : $want;
  return t\eq('reply', $want, '' . $got);
}

/**
 * member (ARG) has photo (ARG)
 *
 * in: MAKE idphoto TheAppAsksToShowACustomerIDPhoto
 */
function memberHasPhoto($id, $photo) {return t\hasPic($id, $photo);}

/**
 * members have: (ARG)
 *
 * in: MAKE identity TheAppAsksToIdentifyACustomerWithAnIdForAnInactiveAccount
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * we tell Admin (ARG) with subs: (ARG)
 *
 * in: TEST transactions TheAppAsksToChargeACustomerWithABadOtherIdOffline
 */
function weTellAdminWithSubs($topic, $subs) {return t\weTellAdmin($topic, $subs);}

/**
 * we reply (ARG)
 *
 * in: TEST info TheAppAsksForRecentTransactionsWithABadActorId
 *     TEST comments TheAppAsksToSubmitAComment
 *     TEST comments TheAppAsksToSubmitACommentWithABadActorId
 *     TEST transactions TheAppAsksToChargeACustomerWithABadActorId
 *     TEST transactions TheAppAsksToChargeACustomerWithABadOtherIdOffline
 */
function weReply($wantStatus) {
  global $testOnly; if (!$testOnly) return FALSE; 

  t\getExitMsg($gotStatus);
/**/  db\del('test', "type='echo'"); // reset for subsequent steps
  return t\eq('status', u\consta('x', $wantStatus), $gotStatus);
}

/**
 * member (ARG) steps left (ARG)
 *
 * in: 
 */
function memberStepsLeft($id, $left0) { return t\stepsLeft($id, $left0); }

/**
 * member (ARG) has (ARG) steps done: (ARG)
 *
 * in: TEST test TheAppAsksToInitializeTheTestData
 *     MAKE accounts Setup
 */
function memberHasStepsDone($id, $task, $steps) {return t\hasStepsDone($id, $task, $steps);}

/**
 * test op (ARG) with: (ARG)
 *
 * in: MAKE test TheAppAsksToInitializeTheTestData
 *     MAKE test TheAppAsksToInitializeTheTestDataWhenThereArePreviousTransactions
 *     MAKE test TheAppAsksUsForTransactionData
 */
function testOpWith($op, $args) {
  if (is_array($args)) $args = $args[0];
  return appPostsWith('test', [compact('op') + ($args ?: [])]);
}

/**
 * we reply (ARG) with JSON values: (ARG)
 *
 * in: TEST test TheAppAsksUsForTransactionData
 *     TEST info TheAppAsksForRecentTransactions
 */
function weReplyWithJSONValues($wantStatus, $want) {
  global $testOnly, $testVars; if (!$testOnly) return FALSE; // maybe combine this with weExitShowing?
  if (!$gotJson = t\getExitMsg($gotStatus)) return FALSE;
/**/  db\del('test', "type='echo'"); // reset for subsequent steps
  if (!t\eq('status', u\consta('x', $wantStatus), $gotStatus)) return FALSE;
  $got = json_decode($gotJson);
  if (rayhas($want, 0)) {
    foreach ($want as $i => $one) t\fixData($want[$i]);
  } else t\fixData($want);
  return t\objEq('reply values', $want, (array) $got);
}

/**
 * count (ARG) is (ARG)
 *
 * in: TEST test TheAppAsksToInitializeTheTestData
 *     TEST test TheAppAsksToInitializeTheTestDataWhenThereArePreviousTransactions
 */
function countIs($what, $count) {return t\count($what, $count);}

/**
 * we tell Promo (ARG) with subs: (ARG)
 *
 * in: TEST comments TheAppAsksToSubmitAComment
 */
function weTellPromoWithSubs($topic, $subs) {return t\weTellAdmin($topic, $subs, 'info@' . CG_DOMAIN);}
