<?php
/**
 * @file
 * rCron Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured that no functions will be deleted and the compiler will
 * not alter code within a function unless you make it look like a function header.
 *
 * You may also add statements just below this header (for example "use" and "require_once").
 */
use CG as r;
use CG\DB as db;
use CG\Testing as t;
use CG\Util as u;
use CG\Backend as be;
use CG\Cron as cr;

require_once __DIR__ . '/../defs.inc';
define('IAOY', t('inflation adjustment on your'));

if (basename($_SERVER['SCRIPT_FILENAME']) != 'compile.php') {
  require_once __DIR__ . '/../cg.inc';
  require_once __DIR__ . '/../cg-testing.inc';
}

/**
 * Add additional setup for any or all features or tests
 */
function extraSetup($feature) {
  t\clear(TX_CRON);
}

/**
 * members: (ARG)
 *
 * in: MAKE aaSeldomNotices Setup
 *     MAKE aaSeldomNotices ItsTimeToWarnAboutAnUpcomingAnnualDonationToCG
 *     BOTH aaSeldomNotices ItsTimeToRenewBacking
 *     MAKE bank Setup
 *     MAKE bank AMemberIsUnderTargetAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE bank AMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE bank AnUnbankedMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE bank ANonmemberHasATargetAndRefills
 *     MAKE cashout Setup
 *     MAKE communitybits Setup
 *     MAKE daily Setup
 *     MAKE eachacct Setup
 *     MAKE gifts Setup
 *     MAKE gifts ANonmemberChoosesADonationToCG
 *     MAKE invoices Setup
 *     MAKE joint Setup
 *     MAKE monthly Setup
 *     MAKE notices Setup
 *     MAKE recurs Setup
 *     MAKE risk Setup
 *     MAKE rules Setup
 *     MAKE sweep Setup
 *     MAKE tickle Setup
 *     MAKE trust Setup
 *     MAKE weekly Setup
 */
function members($list) {return t\members($list);}


/**
 * balances: (ARG)
 *
 * in: MAKE bank AMemberGetsCreditForTheBankTransferImmediately
 *     TEST bank AMemberWithLowCreditLineGetsCreditForTheBankTransferAfterEnoughTime
 *     MAKE bank AMemberHasANegativeBalance
 *     MAKE bank AnUnbankedNondrawingMemberBarelyBelowTargetCannotGetFunded
 *     MAKE bank AMemberIsAtTarget
 *     MAKE bank AMemberIsUnderTargetButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     MAKE bank AMemberIsUnderTargetAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE bank AMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE bank AnUnbankedMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE bank AMemberHasADepositedButNotCompletedTransfer
 *     MAKE bank AnAccountHasATargetButNoRefills
 *     TEST cashout AMemberCompanyCashesOutWeekly
 *     MAKE communitybits Setup
 *     TEST invoices UnpaidInvoicesGetHandled
 *     TEST invoices UnpaidInvoicesGetHandledForAMemberWhoOptedForBalanceFirst
 *     TEST invoices NonmemberUnpaidInvoiceDoesNotGenerateATransferRequest
 *     TEST joint Setup
 *     TEST joint AJointAccountNeedsRefilling
 *     MAKE joint AJointAccountDoesNotNeedRefilling
 *     TEST monthly Setup
 *     TEST recurs Setup
 *     TEST rules AnEndedTemplateHasNoEffect
 *     TEST sweep CronSweepsCGsBatchDonationAccountsIntoItsMainAccount
 *     TEST weekly AMemberCrawlsOutOfDebt
 *     BOTH weekly CronTriesToRunTheWeeklyStuffTwiceInOneDay
 *     TEST weekly AMemberBuildsUpSavings
 *     TEST weekly AMemberCashesOutAutomatically
 */
function balances($list) {return t\balances($list);}

/**
 * bank transfer count is (ARG)
 *
 * in: TEST bank AMemberIsBarelyBelowTarget
 *     TEST bank AMemberGetsCreditForTheBankTransferImmediately
 *     TEST bank AMemberIsAtTarget
 *     TEST bank AMemberIsUnderTargetButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     TEST bank AnUnbankedMemberWithZeroTargetHasBalanceBelowTarget
 *     TEST bank AMemberHasADepositedButNotCompletedTransfer
 *     TEST bank AnAccountHasATargetButNoRefills
 *     TEST joint AJointAccountDoesNotNeedRefilling
 */
function bankTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST tickle ANewbieHasTakenOnlyTheFirstStep
 *     TEST tickle ANonmemberHasNotAcceptedTheInvitation
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * we notice (ARG) to member (ARG)
 *
 * in: TEST tickle ANewbieHasTakenOnlyTheFirstStep
 *     TEST tickle ANewbieHasTakenSomeStepsButNotAll
 */
function weNoticeToMember($notice, $id) {return t\notice($notice, $id);}

/**
 * we tell admin (ARG) with subs: (ARG)
 *
 * in: TEST monthly PaperStatementWarningsAreSent
 */
function weTellAdminWithSubs($topic, $subs) {return t\weTellAdmin($topic, $subs);}

/**
 * we tell (ARG) CO (ARG) with subs: (ARG)
 *
 * in: TEST communitybits CommunityBansSpendingBelowZero
 */
function weTellCOWithSubs($id, $topic, $subs) {return t\weTellAdmin($topic, $subs, t\uid($id));}

/**
 * we email (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST aaSeldomNotices ItsTimeToWarnAboutAnUpcomingAnnualDonationToCG
 *     TEST aaSeldomNotices ItsTimeToRenewBacking
 *     TEST gifts ABrandNewRecurringDonationToCGCanBeCompleted
 *     TEST notices AMemberGetsSomeNotices
 *     TEST notices AMemberGetsSomeWeeklyNotices
 *     TEST notices AMemberGetsPostNotices
 *     TEST posts AParticipantGetsANoticeAboutAnExpiringPost
 *     TEST tickle ANonmemberHasNotAcceptedTheInvitation
 */
function weEmailToMemberWithSubs($key, $email, $subs) {return t\findEmail($key, $email, $subs);}

/**
 * notice count is (ARG)
 *
 * in: 
 */
function noticeCountIs($count) {
  return (db\count('r_notices') == $count);
}

/**
 * member (ARG) charges member (ARG) $(ARG) for (ARG)
 *
 * in: 
 */
function memberChargesMemberFor($payee, $payer, $amount, $for) {
  global $testOnly; if ($testOnly) return FALSE;
  global $scanned; $scanned = TRUE;
  be\transfer('charge', acct(t\uid($payee)), acct(t\uid($payer)), $amount, $for, FOR_GOODS);
  return TRUE;
}

/**
 * member (ARG) confirms form (ARG) with values: (ARG)
 *
 * in: 
 */
function memberConfirmsFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values, TRUE);}

/**
 * usd transfer count is (ARG)
 *
 * in: 
 */
function usdTransferCountIs($count) {return (t\usdTransferCount() == $count);}

/**
 * next DO code is (ARG)
 *
 * in: 
 */
function nextDOCodeIs($code) {
  global $testOnly; if ($testOnly) return FALSE;
  t\doCode($code);
  return TRUE;
}

/**
 * we message member (ARG) with topic (ARG) and subs: (ARG)
 *
 * in: 
 */
function weMessageMemberWithTopicAndSubs($id, $topic, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  $a = acct(t\uid($id));
  $message = t($topic, nni($subs, 0));
  $topic = $GLOBALS['topics'][$topic];
  $fullName = $a->fullName;
  return weEmailToMemberWithSubs('message', $a->email, compact(ray('message topic fullName')));
}

/**
 * members have: (ARG)
 *
 * in: TEST bank AMemberIsBarelyBelowTarget
 *     MAKE bank AnAccountHasATargetButNoRefills
 *     BOTH bank AMembersBankAccountGetsVerified
 *     BOTH bank ADormantJointMemberWithANegativeBalanceHasntHadWentNegSetYet
 *     MAKE bank MemberHasNegativeBalanceAnApprovedInvoiceAndAUsableCreditLine
 *     MAKE cashout AMemberCompanyCashesOutMonthly
 *     MAKE cashout AMemberCompanyCashesOutWeekly
 *     MAKE communitybits CommunityBansSpendingBelowZero
 *     TEST daily GeopositionGetsCalculated
 *     MAKE invoices Setup
 *     MAKE invoices UnpaidInvoicesGetHandled
 *     MAKE invoices UnpaidInvoicesGetHandledForAMemberWhoOptedForBalanceFirst
 *     MAKE invoices NonmemberUnpaidInvoiceDoesNotGenerateATransferRequest
 *     MAKE invoices SecondInvoiceGetsFundedTooForANonrefillingAccount
 *     MAKE invoices AnInvoiceIsApprovedFromAnAccountWithANegativeBalance
 *     MAKE invoices AnInvoiceIsApprovedFromAnAccountWithANegativeBalanceAfterCreditLineTimesOut
 *     MAKE invoices AnInvoiceGetsHandledForAnAccountThatRoundsUp
 *     TEST risk Setup
 *     BOTH tickle MemberHasNegativeBalanceForSeveralMonths
 *     TEST trust WeCalculateTrust
 *     MAKE weekly AMemberBuildsUpSavings
 *     MAKE weekly AMemberCashesOutAutomatically
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * that (ARG) has link results: (ARG)
 *
 * in: 
 */
function thatHasLinkResults($thing, $info) {return t\hasLinkResults($thing, $info);}

/**
 * member (ARG) has done step (ARG)
 *
 * in: MAKE tickle ANewbieHasTakenOnlyTheFirstStep
 *     MAKE tickle ANewbieHasTakenSomeStepsButNotAll
 */
function memberHasDoneStep($id, $step) {return t\doneStep($id, $step);}

/**
 * we do not email (ARG) to member (ARG)
 *
 * in: TEST aaSeldomNotices ItsTimeToRenewBacking
 *     TEST notices AMemberGetsPostNotices
 *     TEST notices AMemberGetsOnlyTodaysPostNotices
 *     TEST tickle ANonmemberHasAcceptedTheInvitation
 *     TEST tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 */
function weDoNotEmailToMember($index, $email) {return t\noSuchEmail($index, $email);}

/**
 * it's time for (ARG)
 *
 * in: MAKE aaSeldomNotices AWeeklyNoticeMemberDoesntGetNoticesOnOtherDays
 *     MAKE notices AMemberGetsSomeWeeklyNotices
 */
function itsTimeFor($what) {
  global $testOnly, $timeFor;
  return $testOnly ? nn($timeFor[$what]) : ($timeFor[$what] = TRUE);
}

/**
 * member field values: (ARG)
 *
 * in: MAKE risk Setup
 */
function memberFieldValues($list) {return t\memberFieldValues($list);}

/**
 * member (ARG) has no photo ID recorded
 *
 * in: MAKE gifts ADonationInvoicetoCGCanBeCompleted
 */
function memberHasNoPhotoIDRecorded($id) {return t\noPhotoId($id);}

/**
 * community email for member (ARG) is (ARG)
 *
 * in: MAKE aaSeldomNotices Setup
 *     MAKE notices Setup
 */
function communityEmailForMemberIs($id, $email) {
  global $testOnly; if ($testOnly) return FALSE;
  return r\acct(t\uid($id))->cttyA->update('email', $email);
}

/**
 * member (ARG) cache is ok
 *
 * in: 
 */
function memberCacheIsOk($id) {return r\acct(t\uid($id))->cacheOk();}

/**
 * oftenness works
 *
 * in: 
 */
function oftennessWorks() {
  global $testOnly; if (!$testOnly) return FALSE;
  include_once __DIR__ . '/rcron/rcron.inc';
  
  
  $oftentests = 'year 01 1/1/2000 12/31/2000 0, year 01 1/1/2000 1/1/2001 1, year 01 1/1/2000 1/2/2001 1, '
  . 'year 01 1/3/2000 12/31/2000 0, year 01 1/3/2000 1/1/2001 1, year 01 1/3/2000 1/4/2001 1, ' // two days late last time
  . 'month 01 1/1/2000 1/31/2000 0, month 01 1/1/2000 2/1/2000 1, month 01 1/1/2000 2/2/2000 1, '
  . 'month 01 1/3/2000 1/31/2000 0, month 01 1/3/2000 2/1/2000 1, month 01 1/3/2000 2/4/2000 1, ' // two days late last time
  . 'week 0 1/2/2000 1/8/2000 0, week 0 1/2/2000 1/9/2000 1, week 0 1/2/2000 1/10/2000 1, '
  . 'week 0 1/4/2000 1/8/2000 0, week 0 1/4/2000 1/9/2000 1, week 0 1/4/2000 1/12/2000 1, '; // two days late last time

  $ok = TRUE;
  foreach (ray($oftenttests) as $one) {
    if (!$one) break;
    list ($period, $chosen, $last, $time, $want) = ray($one);
    \variable_set('last_cron_end', [$period => strtotime($last)]);
    if (cr\timeFor(strtotime($time), $period, $chosen) != $want) $ok = t\output("test failed: $one");
  }
  return $ok;
}

/**
 * we do not notice to member (ARG)
 *
 * in: TEST tickle ANonmemberHasNotAcceptedTheInvitationFromANotyetactiveMember
 */
function weDoNotNoticeToMember($id) {return !t\notice([], $id);}

/**
 * we do not email (ARG)
 *
 * in: TEST tickle ANonmemberHasNotAcceptedTheInvitationFromANotyetactiveMember
 */
function weDoNotEmail($email) {return t\noEmailTo($email);}

/**
 * we message (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST bank AMemberIsBarelyBelowTarget
 *     TEST bank AMemberGetsCreditForTheBankTransferImmediately
 *     TEST bank AMemberHasANegativeBalance
 *     TEST bank AnUnbankedNondrawingMemberBarelyBelowTargetCannotGetFunded
 *     TEST gifts ABrandNewRecurringDonationToCGCanBeCompleted
 *     TEST invoices UnpaidInvoicesGetHandled
 *     TEST invoices UnpaidInvoicesGetHandledForAMemberWhoOptedForBalanceFirst
 *     TEST invoices SecondInvoiceGetsFundedTooForANonrefillingAccount
 *     TEST joint AJointAccountNeedsRefilling
 *     TEST recurs ABrandNewRecurringPaymentCanBeCompleted
 *     TEST weekly AMemberCashesOutAutomatically
 */
function weMessageToMemberWithSubs($index, $id, $subs) {return t\weMessage($index, $id, $subs);}

/**
 * these (ARG): (ARG)
 *
 * in: MAKE aaSeldomNotices AWeeklyNoticeMemberDoesntGetNoticesOnOtherDays
 *     MAKE aaSeldomNotices ItsTimeToWarnAboutAnUpcomingAnnualDonationToCG
 *     BOTH bank AMemberIsBarelyBelowTarget
 *     TEST bank AMemberGetsCreditForTheBankTransferImmediately
 *     BOTH bank AMemberWithLowCreditLineGetsCreditForTheBankTransferAfterEnoughTime
 *     TEST bank AMemberHasANegativeBalance
 *     TEST bank AMemberIsUnderTargetButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     TEST bank AMemberIsUnderTargetAndHasRequestedInsufficientFundsFromTheBank
 *     TEST bank AMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE bank AMemberHasADepositedButNotCompletedTransfer
 *     TEST bank ANonmemberHasATargetAndRefills
 *     MAKE bank AMembersBankAccountGetsVerified
 *     MAKE bank ADormantJointMemberWithANegativeBalanceHasntHadWentNegSetYet
 *     BOTH bank MemberHasNegativeBalanceAnApprovedInvoiceAndAUsableCreditLine
 *     MAKE cashout Setup
 *     TEST cashout AMemberCompanyCashesOutMonthly
 *     TEST cashout AMemberCompanyCashesOutWeekly
 *     MAKE communitybits CommunityBansSpendingBelowZero
 *     MAKE daily Setup
 *     TEST daily GeopositionGetsCalculated
 *     MAKE daily AMemberHasABigDay
 *     MAKE eachacct AUserBecomesAnInternationalCriminal
 *     MAKE gifts Setup
 *     MAKE gifts ADonationToCGIsVisibleToAdmin
 *     BOTH gifts ABrandNewRecurringDonationToCGCanBeCompleted
 *     BOTH gifts ASecondRecurringDonationToCGCanBeCompleted
 *     BOTH gifts ADonationInvoicetoCGCanBeCompleted
 *     BOTH gifts ARecurringDonationToCGCannotBeCompleted
 *     MAKE gifts ANonmemberChoosesADonationToCG
 *     MAKE invoices Setup
 *     BOTH invoices UnpaidInvoicesGetHandled
 *     BOTH invoices UnpaidInvoicesGetHandledForAMemberWhoOptedForBalanceFirst
 *     MAKE invoices NonmemberUnpaidInvoiceDoesNotGenerateATransferRequest
 *     BOTH invoices SecondInvoiceGetsFundedTooForANonrefillingAccount
 *     BOTH invoices ALanguishingInvoiceGetsFundedAgain
 *     BOTH invoices AnInvoiceIsApprovedFromAnAccountWithANegativeBalance
 *     BOTH invoices AnInvoiceIsApprovedFromAnAccountWithANegativeBalanceAfterCreditLineTimesOut
 *     BOTH invoices AnInvoiceGetsHandledForAnAccountThatRoundsUp
 *     MAKE joint Setup
 *     BOTH joint AJointAccountNeedsRefilling
 *     MAKE monthly Setup
 *     TEST monthly CrumbAndRoundupDonationsAreMade
 *     BOTH monthly CrumbsAreInvoiced
 *     MAKE notices Setup
 *     BOTH notices AMemberGetsSomeNotices
 *     BOTH notices AMemberGetsSomeWeeklyNotices
 *     MAKE notices AMemberGetsPostNotices
 *     MAKE notices AMemberGetsOnlyTodaysPostNotices
 *     MAKE posts Setup
 *     MAKE recurs Setup
 *     BOTH recurs ABrandNewRecurringPaymentCanBeCompleted
 *     MAKE recurs ANewRecurringPaymentIsNotToBeCompletedYet
 *     MAKE risk Setup
 *     TEST risk WeCalculateRisks
 *     MAKE rules Setup
 *     TEST rules RulesGetInstantiated
 *     MAKE rules AnEndedTemplateHasNoEffect
 *     BOTH sweep CronSweepsCGsBatchDonationAccountsIntoItsMainAccount
 *     MAKE tickle ANewbieHasTakenOnlyTheFirstStep
 *     MAKE tickle ANonmemberHasNotAcceptedTheInvitation
 *     MAKE tickle ANonmemberHasNotAcceptedTheInvitationFromANotyetactiveMember
 *     MAKE tickle ANonmemberHasAcceptedTheInvitation
 *     MAKE tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 *     MAKE trust Setup
 *     BOTH weekly AMemberCashesOutAutomatically
 */
function these($thing, $list) {return t\these($thing, $list);}

/**
 * count (ARG) is (ARG)
 *
 * in: TEST bank ANonmemberHasATargetAndRefills
 *     TEST bank AMembersBankAccountGetsVerified
 *     TEST bank MemberHasNegativeBalanceAnApprovedInvoiceAndAUsableCreditLine
 *     TEST gifts ABrandNewRecurringDonationToCGCanBeCompleted
 *     TEST gifts ASecondRecurringDonationToCGCanBeCompleted
 *     TEST gifts ARecurringDonationToCGCannotBeCompleted
 *     TEST gifts ANonmemberChoosesADonationToCG
 *     TEST invoices UnpaidInvoicesGetHandled
 *     TEST invoices UnpaidInvoicesGetHandledForAMemberWhoOptedForBalanceFirst
 *     TEST invoices NonmemberUnpaidInvoiceDoesNotGenerateATransferRequest
 *     TEST monthly CrumbAndRoundupDonationsAreMade
 *     TEST monthly CrumbsAreInvoiced
 *     TEST recurs ABrandNewRecurringPaymentCanBeCompleted
 *     TEST recurs ANewRecurringPaymentIsNotToBeCompletedYet
 *     TEST rules RulesGetInstantiated
 *     TEST rules AnEndedTemplateHasNoEffect
 */
function countIs($what, $count) {return t\count($what, $count);}


/**
 * riskThresholds: (ARG)
 *
 * in: MAKE risk Setup
 *     TEST risk WeCalculateRisks
 */
function riskThresholds($ray) {
  global $testOnly;
  $ray = u\prefixKeys('big', $ray[0]);
  if ($testOnly) {
    $thresholds = getv('riskThresholds', []);
    return t\eq(t('risk thresholds'), $ray, $thresholds);
  } else {
    setv('riskThresholds', $ray);
    return TRUE;
  }
}

/**
 * riskThresholdPercent is (ARG)
 *
 * in: MAKE risk WeCalculateRisks
 */
function riskThresholdPercentIs($pct) {
  global $testOnly; if ($testOnly) return FALSE;
  global $testThresholdPct; 

  $testThresholdPct = $pct;
  return TRUE;
}

/**
 * cron runs (ARG)
 *
 * in: MAKE aaSeldomNotices AWeeklyNoticeMemberDoesntGetNoticesOnOtherDays
 *     MAKE aaSeldomNotices ItsTimeToWarnAboutAnUpcomingAnnualDonationToCG
 *     MAKE aaSeldomNotices ItsTimeToRenewBacking
 *     MAKE bank AMemberIsBarelyBelowTarget
 *     MAKE bank AMemberGetsCreditForTheBankTransferImmediately
 *     MAKE bank AMemberWithLowCreditLineGetsCreditForTheBankTransferAfterEnoughTime
 *     MAKE bank AMemberHasANegativeBalance
 *     MAKE bank AnUnbankedNondrawingMemberBarelyBelowTargetCannotGetFunded
 *     MAKE bank AMemberIsAtTarget
 *     MAKE bank AMemberIsUnderTargetButAlreadyRequestedBarelyEnoughFundsFromTheBank
 *     MAKE bank AMemberIsUnderTargetAndHasRequestedInsufficientFundsFromTheBank
 *     MAKE bank AMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE bank AnUnbankedMemberWithZeroTargetHasBalanceBelowTarget
 *     MAKE bank AMemberHasADepositedButNotCompletedTransfer
 *     MAKE bank AnAccountHasATargetButNoRefills
 *     MAKE bank ANonmemberHasATargetAndRefills
 *     MAKE bank AMembersBankAccountGetsVerified
 *     MAKE bank ADormantJointMemberWithANegativeBalanceHasntHadWentNegSetYet
 *     MAKE bank MemberHasNegativeBalanceAnApprovedInvoiceAndAUsableCreditLine
 *     MAKE cashout AMemberCompanyCashesOutMonthly
 *     MAKE cashout AMemberCompanyCashesOutWeekly
 *     MAKE communitybits CommunityBansSpendingBelowZero
 *     MAKE daily GeopositionGetsCalculated
 *     MAKE daily AMemberHasABigDay
 *     MAKE eachacct AUserBecomesAnInternationalCriminal
 *     MAKE gifts ABrandNewRecurringDonationToCGCanBeCompleted
 *     MAKE gifts ASecondRecurringDonationToCGCanBeCompleted
 *     MAKE gifts ADonationInvoicetoCGCanBeCompleted
 *     MAKE gifts ARecurringDonationToCGCannotBeCompleted
 *     MAKE gifts ANonmemberChoosesADonationToCG
 *     MAKE invoices UnpaidInvoicesGetHandled
 *     MAKE invoices UnpaidInvoicesGetHandledForAMemberWhoOptedForBalanceFirst
 *     MAKE invoices NonmemberUnpaidInvoiceDoesNotGenerateATransferRequest
 *     MAKE invoices SecondInvoiceGetsFundedTooForANonrefillingAccount
 *     MAKE invoices ALanguishingInvoiceGetsFundedAgain
 *     MAKE invoices AnInvoiceIsApprovedFromAnAccountWithANegativeBalance
 *     MAKE invoices AnInvoiceIsApprovedFromAnAccountWithANegativeBalanceAfterCreditLineTimesOut
 *     MAKE invoices AnInvoiceGetsHandledForAnAccountThatRoundsUp
 *     MAKE joint AJointAccountNeedsRefilling
 *     MAKE joint AJointAccountDoesNotNeedRefilling
 *     MAKE monthly PaperStatementWarningsAreSent
 *     MAKE monthly CrumbAndRoundupDonationsAreMade
 *     MAKE monthly CrumbsAreInvoiced
 *     MAKE notices AMemberGetsSomeNotices
 *     MAKE notices AMemberGetsSomeWeeklyNotices
 *     MAKE notices AMemberGetsPostNotices
 *     MAKE notices AMemberGetsOnlyTodaysPostNotices
 *     MAKE posts AParticipantGetsANoticeAboutAnExpiringPost
 *     MAKE recurs ABrandNewRecurringPaymentCanBeCompleted
 *     MAKE recurs ANewRecurringPaymentIsNotToBeCompletedYet
 *     MAKE risk Setup
 *     MAKE risk WeCalculateRisks
 *     MAKE rules RulesGetInstantiated
 *     MAKE rules AnEndedTemplateHasNoEffect
 *     MAKE sweep CronSweepsCGsBatchDonationAccountsIntoItsMainAccount
 *     MAKE tickle ANewbieHasTakenOnlyTheFirstStep
 *     MAKE tickle ANewbieHasTakenSomeStepsButNotAll
 *     MAKE tickle ANonmemberHasNotAcceptedTheInvitation
 *     MAKE tickle ANonmemberHasNotAcceptedTheInvitationFromANotyetactiveMember
 *     MAKE tickle ANonmemberHasAcceptedTheInvitation
 *     MAKE tickle ANonmemberHasAcceptedAnInvitationFromSomeoneElseInstead
 *     MAKE tickle MemberHasNegativeBalanceForSeveralMonths
 *     MAKE trust WeCalculateTrust
 *     MAKE weekly AMemberCrawlsOutOfDebt
 *     MAKE weekly CronTriesToRunTheWeeklyStuffTwiceInOneDay
 *     MAKE weekly AMemberBuildsUpSavings
 *     MAKE weekly AMemberCashesOutAutomatically
 */
function cronRuns($op) {return t\cronRuns($op);}

/**
 * member (ARG) visits page (ARG)
 *
 * in: MAKE gifts ADonationToCGIsVisibleToAdmin
 */
function memberVisitsPage($id, $page) {return t\memberVisitsPage($id, $page);}

/**
 * we show (ARG) with: (ARG)
 *
 * in: TEST gifts ADonationToCGIsVisibleToAdmin
 */
function weShowWith($title, $content = FALSE, $debug = TRUE) {return t\weShowWith($title, $content, $debug);}


/**
 * we do not message (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST invoices UnpaidInvoicesGetHandled
 */
function weDoNotMessageToMemberWithSubs($index, $id, $subs) {return !t\weMessage($index, $id, $subs);}

/**
 * not these (ARG): (ARG)
 *
 * in: TEST aaSeldomNotices AWeeklyNoticeMemberDoesntGetNoticesOnOtherDays
 */
function notThese($things, $list) {return !t\these($things, $list);}

/**
 * member (ARG) has risks (ARG)
 *
 * in: TEST risk WeCalculateRisks
 */
function memberHasRisks($id, $risks) {return t\memberHasRisks($id, $risks);}

/**
 * we tell admin (ARG) with ray: (ARG)
 *
 * in: TEST daily AMemberHasABigDay
 *     TEST eachacct AUserBecomesAnInternationalCriminal
 */
function weTellAdminWithRay($topic, $ray) {return t\weTellAdmin($topic, ['list' => pr($ray)]);}

/**
 * member (ARG) has admin permissions: (ARG)
 *
 * in: MAKE gifts Setup
 */
function memberHasAdminPermissions($id, $perms) {return t\adminPerms($id, $perms);}

/**
 * it's later
 *
 * in: MAKE gifts ABrandNewRecurringDonationToCGCanBeCompleted
 *     MAKE gifts ASecondRecurringDonationToCGCanBeCompleted
 *     MAKE gifts ARecurringDonationToCGCannotBeCompleted
 */
function itsLater() {return t\itsLater();}

/**
 * only these (ARG): (ARG)
 *
 * in: TEST gifts ARecurringDonationToCGCannotBeCompleted
 */
function onlyThese($thing, $list) { return (t\count($thing, count($list)) and t\these($thing, $list)); }

/**
 * variable (ARG) is (ARG)
 *
 * in: MAKE eachacct AUserBecomesAnInternationalCriminal
 */
function variableIs($k, $v) {return t\varIs($k, $v);}
