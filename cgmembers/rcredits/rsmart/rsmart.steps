<?php
/**
 * @file
 * rPos Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file description will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured that no functions will be deleted and the compiler will
 * not alter code within a function unless you make it look like a function header.
 *
 * You may also add statements just below this header (for example "use" and "require_once").
 */

use CG as r;
use CG\DB as db;
use CG\Testing as t;
use CG\Util as u;
use CG\Backend as be;

require_once __DIR__ . '/../defs.inc';

if (basename($_SERVER['SCRIPT_FILENAME']) != 'compile.php') {
  require_once __DIR__ . '/../cg.inc';
  require_once __DIR__ . '/../cg-testing.inc';
  require_once __DIR__ . '/../rsmart/rsmart.inc';
}

/**
 * Add additional setup for any or all features or tests
 */
function extraSetup() {
  t\clear(TX_APP);
}

/**
 * members: (ARG)
 *
 * in: MAKE joint Setup
 *     MAKE aaPayTwice Setup
 *     MAKE identify Setup
 *     MAKE startup Setup
 *     MAKE exchange Setup
 *     MAKE time Setup
 *     MAKE offline Setup
 *     MAKE coupons Setup
 *     MAKE undo Setup
 *     MAKE transact Setup
 */
function members($list) {return t\members($list);}

/**
 * agent (ARG) asks device (ARG) to identify (ARG)
 *
 * in: MAKE identify DeviceShouldHaveAnIdentifier
 *     MAKE identify ACashierScansACustomerCard
 *     MAKE identify TheDefaultCashierScansACustomerCard
 *     MAKE identify TheDefaultCashierScansADeactivatedCard
 *     MAKE identify ACashierScansACustomerCardBeforeSigningIn
 *     MAKE identify ACashierScansACustomerCardWhoseBalanceIsSecret
 *     MAKE identify ACashierScansACompanyCustomerCard
 *     MAKE identify ANonyetactiveMemberCardIsScanned
 *     MAKE identify AMemberMakesAPurchaseForTheFirstTime
 */
function agentAsksDeviceToIdentify($agent, $device, $qr) {
  return agentAsksDeviceToIdentifyWithPIN($agent, $device, $qr);
}

/**
 * we respond with: (ARG)
 *
 * in: TEST identify ACashierSignsIn
 *     TEST identify DeviceHasNoIdentifierYet
 *     TEST identify DeviceHasNoIdentifierYetForAnIndividual
 *     TEST identify DeviceHasNoIdentifierYetForTrialCompany
 *     TEST identify ACashierSignsInSigningAnotherCashierOut
 *     TEST identify AManagerSignsIn
 *     TEST identify ACashierScansACustomerCard
 *     TEST identify TheDefaultCashierScansACustomerCard
 *     TEST identify ACustomerScansTheirOwnCardForSelfservice
 *     TEST identify ACashierScansACustomerCardWhoseBalanceIsSecret
 *     TEST identify ACashierScansACompanyCustomerCard
 *     TEST identify AMemberMakesAPurchaseForTheFirstTime
 *     TEST time TheDeviceAsksForTheTime
 *     TEST time ACashierSignsIn
 *     TEST undo AnAgentAsksToUndoARefundTooLate
 */
function weRespondWith($args) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;

  t\output('expecting: ' . pr($args[0]));
  foreach ($args[0] as $k => $v) {
    $got = nni($rposResult, $k);
    if ($k == 'descriptions') $v = empty($v) ? [0 => ''] : ray($v);
    if ($k == 'message') $v = tr($v);
    if ($k == 'bad') $v = empty($v) ? [] : ray($v);
    if ($k == 'can' or $k == 'canMgr') { // currently tests only signed-out permissions
      if ($k == 'canMgr') $got = nni($rposResult, 'can') >> (APP_CAN_BITS + 1);
      $got &= APP_CAN_MASK;
      $flags = 0;
      if ($v) foreach (ray($v) as $one) $flags |= u\bit(u\consta('co', $one));
      $v = $flags & APP_CAN_MASK;
      if ($k == 'can') {
        if ($got & (u\bit(CO_MANAGE) << (APP_CAN_BITS + 1))) $v |= (u\bit(CO_MANAGE) << (APP_CAN_BITS + 1)); // make manage bit go away, since it applies to agent
      }
    }

    if (in($k, R_DATE_FLDS) ? !t\sameTime($k, $v, $got) : !t\eq($k, $v, $got)) return FALSE;
  }
  return TRUE;
}

/**
 * agent (ARG) asks device (ARG) for a picture of member (ARG) with card code (ARG)
 *
 * in: MAKE identify DeviceAsksForAPictureToGoWithTheQR
 *     MAKE identify DeviceAsksForAPictureButThereIsntOne
 *     MAKE identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function agentAsksDeviceForAPictureOfMemberWithCardCode($agent, $device, $member, $code) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('photo', compact(ray('member code')), $agent, $device);
}

/**
 * member (ARG) has photo (ARG)
 *
 * in: MAKE identify DeviceAsksForAPictureToGoWithTheQR
 *     MAKE identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function memberHasPhoto($id, $photo) {return t\hasPic($id, $photo);}

/**
 * we respond with photo (ARG)
 *
 * in: TEST identify DeviceAsksForAPictureToGoWithTheQR
 *     TEST identify DeviceAsksForAPictureButThereIsntOne
 *     TEST identify DeviceAsksForAPictureWithTheWrongCardCode
 */
function weRespondWithPhoto($photo) {
  global $testOnly;
  global $rposResult;
  return t\eq('photo result', tr($photo), $rposResult);
}

/**
 * member (ARG) has no photo
 *
 * in: MAKE identify DeviceAsksForAPictureButThereIsntOne
 */
function memberHasNoPhoto($id) {
  global $testOnly; if ($testOnly) return FALSE;
  if (!$a = r\acct(t\uid($id))) return FALSE;
  $a->update('photo', '');
  u\deleteFile($a->photoFilename(TRUE));
  return !$a->hasPhoto;
}

/**
 * balances: (ARG)
 *
 * in: TEST joint Setup
 *     TEST joint ACashierAsksToChargeSomeone
 *     TEST aaPayTwice Setup
 *     TEST exchange Setup
 *     TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST offline Setup
 *     TEST offline ACashierChargedSomeoneOffline
 *     TEST offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     TEST offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST coupons Setup
 *     TEST coupons AMemberRedeemsADiscountCoupon
 *     TEST undo Setup
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST transact Setup
 *     TEST transact ACashierAsksToChargeSomeonePayingWithCreditLine
 *     TEST transact ACashierAsksToRefundSomeone
 */
function balances($list) {return t\balances($list);}

/**
 * agent (ARG) asks device (ARG) to undo transaction (ARG) code (ARG)
 *
 * in: MAKE undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     MAKE undo AnAgentAsksToUndoARefundSoonEnough
 *     MAKE undo AnAgentAsksToUndoARefundTooLate
 *     MAKE undo AnAgentAsksToUndoACashoutCharge
 *     MAKE undo AnAgentAsksToUndoACashinPayment
 *     MAKE undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     MAKE undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     MAKE undo AnAgentAsksToUndoAChargeWithoutPermission
 *     MAKE undo AnAgentAsksToUndoARefundWithoutPermission
 */
function agentAsksDeviceToUndoTransactionCode($agent, $device, $xid, $code) {
  global $testOnly; if ($testOnly) return FALSE;

  $fields = 'member amount goods description created force code proof';
  $q = db\get('uid1, agt1, amt AS amount, goods, for1 AS description, created', 'txs', compact('xid'));
  if ($q) {
    extract($q);
    $member = r\qid($uid1, $agt1);
    list ($goods, $force, $proof) = [(int) ($goods == FOR_GOODS), -1, 'calc'];
    $args = compact(ray($fields));
  } else {
    $args = ray($fields, R_SERVER_ID . '.ZZA', round(rand()/100, 2), rand(0, 1), 'whatever', rand(), -1, $code, '');
  }
  return t\hitServer('charge', $args, $agent, $device);
}

// with code: agent:C:B device:devC txid:5 code:ccE
// with subs: agent:C:B device:devC  member:.ZZA code:ccA amount:80 goods:1 description:whatever created:%today-1d

/**
 * agent (ARG) asks device (ARG) to undo transaction with subs: (ARG)
 *
 * in: MAKE coupons AMemberRedeemsADiscountCoupon
 *     MAKE undo AnAgentAsksToUndoACharge
 *     MAKE undo AnAgentAsksToUndoANonexistentTransaction
 */
function agentAsksDeviceToUndoTransactionWithSubs($agent, $device, $subs) {
  global $testOnly; if ($testOnly) return FALSE;
  $subs = $subs[0] + ray('force proof', -1, 'calc');;
  return t\hitServer('charge', $subs, $agent, $device);
}

/**
 * with balance (ARG)
 *
 * in: 
 */
function withBalance($subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  if (!$got = nni($rposResult, 'balance')) return !$subs; else $subs = $subs[0];
  $balance = t('customer balance', $subs);
  if (nni($subs, 'did')) {
    if (nni($subs, 'forCash')) u\prefix(' ', $subs['forCash']);
    $balance .= t('just did', $subs);
  }
/**/  t\output('Expecting ' . print_r(compact('balance'), 1), 'expect');
  return ($got == $balance);
}

/**
 * with undo (ARG)
 *
 * in: TEST joint ACashierAsksToChargeSomeone
 *     TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST undo AnAgentAsksToUndoACharge
 *     TEST undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST undo AnAgentAsksToUndoARefundSoonEnough
 *     TEST undo AnAgentAsksToUndoACashoutCharge
 *     TEST undo AnAgentAsksToUndoACashinPayment
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST transact ACashierAsksToChargeSomeonePayingWithCreditLine
 *     TEST transact ACashierAsksToRefundSomeone
 */
function withUndo($subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;

  $got = nni($rposResult, 'undo');
  
  if (is_array($subs)) {
    if ($got) $subs = $subs[0]; else return !$subs;
    $undo = t('confirm undo app', $subs);
  } else $undo = $subs;

  return t\eq('undo', $undo, $got);
}

/**
 * we return error (ARG) with subs: (ARG)
 *
 * in: TEST aaPayTwice SellerTriesToChargeTheCustomerTwice
 *     TEST identify ANonyetactiveMemberCardIsScanned
 *     TEST exchange ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     TEST exchange ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     TEST exchange DeviceGivesTooBigAnAmount
 *     TEST exchange SellerAgentLacksPermissionToBuy
 *     TEST exchange SellerAgentLacksPermissionToScanAndSell
 *     TEST exchange BuyerAgentLacksPermissionToBuy
 *     TEST transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     TEST transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     TEST transact DeviceGivesTooBigAnAmount
 *     TEST transact SellerAgentLacksPermissionToBuy
 *     TEST transact SellerAgentLacksPermissionToScanAndSell
 *     TEST transact BuyerAgentLacksPermissionToBuy
 */
function weReturnErrorWithSubs($msg, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  $msg = strip_tags(t($msg, nni($subs, 0)));
  if ($rposResult['ok'] == '0' and $rposResult['message'] == $msg) return TRUE;
/**/ t\output(ray('wanted,actually sent', $msg, print_r($rposResult, 1)));
  return FALSE;
}

/**
 * we return error (ARG)
 *
 * in: TEST identify DeviceShouldHaveAnIdentifier
 *     TEST identify AManagerAsksUsToIdentifyTheManagersOwnCard
 *     TEST identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 *     TEST identify TheDefaultCashierScansADeactivatedCard
 *     TEST identify AnUnauthorizedCashierScansIn
 *     TEST identify ACashierScansACustomerCardBeforeSigningIn
 *     TEST startup DeviceRequestsABadOp
 *     TEST startup DeviceShouldHaveAnIdentifier
 *     TEST startup AnAgentForAnInactiveCompanyTriesAnOp
 *     TEST exchange ACashierAsksToPaySelf
 *     TEST exchange DeviceGivesNoMemberId
 *     TEST exchange DeviceGivesBadAccountId
 *     TEST exchange DeviceGivesNoAmount
 *     TEST exchange DeviceGivesBadAmount
 *     TEST exchange DeviceGivesNoPurposeForGoodsAndServices
 *     TEST exchange DeviceSendsWrongProof
 *     TEST offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     TEST offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
 *     TEST transact ACashierAsksToPaySelf
 *     TEST transact DeviceGivesNoMemberId
 *     TEST transact DeviceGivesBadAccountId
 *     TEST transact DeviceGivesNoAmount
 *     TEST transact DeviceGivesBadAmount
 *     TEST transact DeviceGivesNoPurposeForGoodsAndServices
 *     TEST transact DeviceSendsWrongProof
 */
function weReturnError($msg) {return weReturnErrorWithSubs($msg, array());}

/**
 * selling: (ARG)
 *
 * in: MAKE joint Setup
 *     MAKE aaPayTwice Setup
 *     MAKE identify Setup
 *     MAKE exchange Setup
 *     MAKE time Setup
 *     MAKE offline Setup
 *     MAKE coupons Setup
 *     MAKE undo Setup
 *     MAKE transact Setup
 */
function selling($selling) {return t\selling($selling);}

/**
 * company flags: (ARG)
 *
 * in: MAKE joint Setup
 *     MAKE aaPayTwice Setup
 *     MAKE identify Setup
 *     MAKE exchange Setup
 *     MAKE time Setup
 *     MAKE offline Setup
 *     MAKE coupons Setup
 *     MAKE undo Setup
 *     MAKE transact Setup
 */
function companyFlags($flags) {return t\companyFlags($flags);}

/**
 * agent (ARG) asks device (ARG) for op (ARG) with: (ARG)
 *
 * in: MAKE startup DeviceRequestsABadOp
 *     MAKE startup DeviceShouldHaveAnIdentifier
 *     MAKE startup AnAgentForAnInactiveCompanyTriesAnOp
 */
function agentAsksDeviceForOpWith($agent, $device, $op, $extra) {
  global $testOnly; if ($testOnly) return FALSE;
  $extra = nni($extra, 0) ?: array();
  return t\hitServer($op, $extra, $agent, $device);
}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: 
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * agent (ARG) asks device (ARG) to charge (ARG) $(ARG) for (ARG): (ARG) at (ARG)
 *
 * in: MAKE joint ACashierAsksToChargeSomeone
 *     MAKE aaPayTwice SellerTriesToChargeTheCustomerTwice
 *     MAKE exchange ACashierAsksToChargeSomeoneForCash
 *     MAKE exchange ACashierAsksToRefundSomeone
 *     MAKE exchange ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     MAKE exchange ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     MAKE exchange ACashierAsksToPaySelf
 *     MAKE exchange DeviceGivesNoMemberId
 *     MAKE exchange DeviceGivesBadAccountId
 *     MAKE exchange DeviceGivesNoAmount
 *     MAKE exchange DeviceGivesBadAmount
 *     MAKE exchange DeviceGivesTooBigAnAmount
 *     MAKE exchange DeviceGivesNoPurposeForGoodsAndServices
 *     MAKE exchange SellerAgentLacksPermissionToBuy
 *     MAKE exchange SellerAgentLacksPermissionToScanAndSell
 *     MAKE exchange BuyerAgentLacksPermissionToBuy
 *     MAKE exchange DeviceSendsWrongProof
 *     MAKE offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE coupons AMemberRedeemsADiscountCoupon
 *     MAKE transact ACashierAsksToChargeSomeonePayingWithCreditLine
 *     MAKE transact ACashierAsksToRefundSomeone
 *     MAKE transact ACashierAsksToChargeAnotherMemberWithInsufficientBalance
 *     MAKE transact ACashierAsksToRefundAnotherMemberWithInsufficientBalance
 *     MAKE transact ACashierAsksToPaySelf
 *     MAKE transact DeviceGivesNoMemberId
 *     MAKE transact DeviceGivesBadAccountId
 *     MAKE transact DeviceGivesNoAmount
 *     MAKE transact DeviceGivesBadAmount
 *     MAKE transact DeviceGivesTooBigAnAmount
 *     MAKE transact DeviceGivesNoPurposeForGoodsAndServices
 *     MAKE transact SellerAgentLacksPermissionToBuy
 *     MAKE transact SellerAgentLacksPermissionToScanAndSell
 *     MAKE transact BuyerAgentLacksPermissionToBuy
 *     MAKE transact DeviceSendsWrongProof
 *     MAKE transact ACashierInTheSameCommunityAsksToChargeSomeoneUnconfirmed
 *     MAKE transact CashierAsksToChargeSixNinetynine
 */
function agentAsksDeviceToChargeForAt($agent, $device, $member, $amount, $goods, $description, $created) {
  return reconcilingOnChargingForAtForce($agent, $device, $member, $amount, $goods, $description, $created, 0);
}

/**
 * agent (ARG) asks device (ARG) to charge (ARG) $(ARG) for (ARG): (ARG) at (ARG) force (ARG)
 *
 * in: MAKE undo ACashierReversesATransactionWithInsufficientFunds
 */
function agentAsksDeviceToChargeForAtForce($agent, $device, $member, $amount, $goods, $desc, $created, $force) {
  return reconcilingOnChargingForAtForce($agent, $device, $member, $amount, $goods, $desc, $created, $force);
}

/**
 * reconciling (ARG) on (ARG) charging (ARG) $(ARG) for (ARG): (ARG) at (ARG) force (ARG)
 *
 * in: MAKE offline ACashierChargedSomeoneOffline
 *     MAKE offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     MAKE offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     MAKE offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     MAKE offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
 */
function reconcilingOnChargingForAtForce($agent, $device, $member, $amount, $goods, $description, $created, $force) {
  global $testOnly; if ($testOnly) return FALSE;
  
  list ($member, $code) = t\parseQr($member); // ignore code, if any
  $proof = 'calc'; // tell hitServer() to send correct proof param
  return t\hitServer('charge', compact(ray('member code proof amount goods description created force')), $agent, $device);
}

/**
 * with did (ARG)
 *
 * in: TEST joint ACashierAsksToChargeSomeone
 *     TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST undo AnAgentAsksToUndoACharge
 *     TEST undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST undo AnAgentAsksToUndoARefundSoonEnough
 *     TEST undo AnAgentAsksToUndoACashoutCharge
 *     TEST undo AnAgentAsksToUndoACashinPayment
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST transact ACashierAsksToChargeSomeonePayingWithCreditLine
 *     TEST transact ACashierAsksToRefundSomeone
 */
function withDid($subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  $expect = $subs ? t('just did', $subs[0]) : '';
  return t\eq('did', $expect, nni($rposResult, 'did'));
}

/**
 * we respond ok txid (ARG) created (ARG) balance (ARG)
 *
 * in: TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST offline ACashierChargedSomeoneOfflineButItActuallyWentThrough
 *     TEST offline ACashierDeclinedToChargeSomeoneOfflineAndItDidntGoThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST undo AnAgentAsksToUndoANonexistentTransaction
 *     TEST undo ACashierReversesATransactionWithInsufficientFunds
 */
function weRespondOkTxidCreatedBalance($txid, $created, $balance) {
  return weRespondOkTxidCreatedBalanceSaying($txid, $created, $balance);
}

/**
 * with message (ARG) with subs: (ARG)
 *
 * in: TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 */
function withMessageWithSubs($msg, $subs) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  $expect = $subs ? t($msg, $subs[0]) : '';
  return t\eq('message', $expect, nni($rposResult, 'message'));
}

/**
 * agent (ARG) on device (ARG) asks for the time
 *
 * in: MAKE time TheDeviceAsksForTheTime
 */
function agentOnDeviceAsksForTheTime($agent, $device) {
  global $testOnly; if ($testOnly) return FALSE;
  return t\hitServer('time', array(), $agent, $device);
}


/**
 * member (ARG) has no photo ID recorded
 *
 * in: MAKE identify AMemberMakesAPurchaseForTheFirstTime
 */
function memberHasNoPhotoIDRecorded($id) {return t\noPhotoId($id);}

/**
 * members have: (ARG)
 *
 * in: MAKE identify ACustomerScansTheirOwnCardForSelfservice
 *     MAKE identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOnline
 *     MAKE offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithTxDateAfterTheChange
 *     MAKE transact CashierAsksToChargeSixNinetynine
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * agent (ARG) asks device (ARG) to identify (ARG) with PIN (ARG)
 *
 * in: MAKE identify ACustomerScansTheirOwnCardForSelfservice
 *     MAKE identify ACustomerScansTheirOwnCardForSelfserviceWithWrongPIN
 */
function agentAsksDeviceToIdentifyWithPIN($agent, $device, $qr, $pin = NULL, $signin = 0) {
  global $testOnly; if ($testOnly) return FALSE;
  list ($member, $code) = t\parseQr($qr);
  if ($device) $device = u\b64encode(u\cryPP($device, 'private'));
  return t\hitServer('identify', compact(ray('member code pin signin')), $agent, $device);
}

/**
 * bad codes (ARG)
 *
 * in: 
 */
function badCodes($bad) {
  global $testOnly; 
  
  list ($qid, $code) = explode(',', $bad);
  $qid = a(t\uid($qid))->qid;

  return $testOnly
  ? db\exists('r_bad', 'qid=:qid AND code=:code', compact('qid', 'code'))
  : db\insert('r_bad', ray('qid code created', $qid, $code, now()), 'created');
}

/**
 * with proof of agent (ARG) amount (ARG) created (ARG) member (ARG) code (ARG)
 *
 * in: 
 */
function withProofOfAgentAmountCreatedMemberCode($agent, $amount, $created, $member, $code) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;
  
  foreach (['agent', 'member'] as $k) $$k = t\fullQid2($$k);
  $amount = number_format($amount, 2);
  $proof = "$agent$amount$member$code$created";
//  $hash = \_password_crypt('sha512', $proof, @$rposResult['proof']);
  return (nni($rposResult, 'proof') == u\hash($proof));
}
/**
 * we respond ok txid (ARG) created (ARG) balance (ARG) saying: (ARG)
 *
 * in: TEST joint ACashierAsksToChargeSomeone
 *     TEST offline ACashierChargedSomeoneOffline
 *     TEST offline DeviceSendsCorrectOldProofForLegitTxAfterMemberLosesCardWithAppOffline
 *     TEST undo AnAgentAsksToUndoACharge
 *     TEST undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST undo AnAgentAsksToUndoARefundSoonEnough
 *     TEST undo AnAgentAsksToUndoACashoutCharge
 *     TEST undo AnAgentAsksToUndoACashinPayment
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoAChargeWithoutPermission
 *     TEST undo AnAgentAsksToUndoARefundWithoutPermission
 *     TEST transact ACashierAsksToChargeSomeonePayingWithCreditLine
 *     TEST transact ACashierAsksToRefundSomeone
 *     TEST transact ACashierInTheSameCommunityAsksToChargeSomeoneUnconfirmed
 */
function weRespondOkTxidCreatedBalanceSaying($txid, $created, $balance, $msgRay = NULL) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $rposResult;

  extract($rposResult, EXTR_PREFIX_ALL, 'a'); // actual results
  $ok = '1';
  foreach (ray('ok txid balance') as $k) if (nni($rposResult, $k) != $$k) $error = 1;
  if (!t\sameTime('created', nn($a_created), $created)) $error = 2;
  
  if ($msgRay) {
    $msgRay = $msgRay[0];
    $index = (nni($msgRay, 'solution') ? 'report undo|' : '') . 'report tx'; // |for why
    $message = t($index, $msgRay); // message that is wanted (called "message")
    if ($a_message != $message) $error = 3;
  }

  if (nn($error)) {
    if (nn($msgRay)) u\preray(compact('message'), $msgRay);
    t\output('Expecting (but did not get): ' . pr(compact(ray('ok txid created balance msgRay'))), 'expect');
    t\output('Got: ' . pr($rposResult + compact('error')));
    return FALSE;
  } else return TRUE;
}

/**
 * we change member (ARG) cardCode
 *
 * in: MAKE identify TheDefaultCashierScansADeactivatedCard
 */
function weChangeMemberCardCode($id) {
  global $testOnly; if ($testOnly) return FALSE;
  a(t\uid($id))->makeCardCode();
  return TRUE;
}

/**
 * coupons: (ARG)
 *
 * in: MAKE coupons AMemberRedeemsADiscountCoupon
 */
function coupons($list) {return t\coupons($list);}

/**
 * transaction count is (ARG)
 *
 * in: 
 */
function transactionCountIs($n) {return t\txCountIs($n);}

/**
 * transaction header count is (ARG)
 *
 * in: TEST coupons AMemberRedeemsADiscountCoupon
 */
function transactionHeaderCountIs($n) { return t\count('tx_hdrs', $n); }

/**
 * transaction entry count is (ARG)
 *
 * in: 
 */
function transactionEntryCountIs($n) { return t\count('entries', $n); }

/**
 * count (ARG) is (ARG)
 *
 * in: TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 */
function countIs($what, $count) {return t\count($what, $count);}

/**
 * agent (ARG) asks device (ARG) to sign in (ARG)
 *
 * in: MAKE identify ACashierSignsIn
 *     MAKE identify DeviceHasNoIdentifierYet
 *     MAKE identify DeviceHasNoIdentifierYetForAnIndividual
 *     MAKE identify DeviceHasNoIdentifierYetForTrialCompany
 *     MAKE identify ACashierSignsInSigningAnotherCashierOut
 *     MAKE identify AManagerSignsIn
 *     MAKE identify AManagerAsksUsToIdentifyTheManagersOwnCard
 *     MAKE identify AnUnauthorizedCashierScansIn
 *     MAKE time ACashierSignsIn
 */
function agentAsksDeviceToSignIn($agent, $device, $qr) {return agentAsksDeviceToIdentifyWithPIN($agent, $device, $qr, NULL, 1);}

/**
 * next code is (ARG) asymmetrically (ARG) encrypted
 *
 * in: MAKE identify DeviceHasNoIdentifierYet
 *     MAKE identify DeviceHasNoIdentifierYetForAnIndividual
 *     MAKE identify DeviceHasNoIdentifierYetForTrialCompany
 */
function nextCodeIsAsymmetricallyEncrypted($phrase, $type) {return t\cryNextCode($phrase, $type);}

/**
 * we message (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST joint ACashierAsksToChargeSomeone
 *     TEST exchange ACashierAsksToChargeSomeoneForCash
 *     TEST exchange ACashierAsksToRefundSomeone
 *     TEST offline ACashierChargedSomeoneOffline
 *     TEST offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThrough
 *     TEST offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     TEST undo AnAgentAsksToUndoACharge
 *     TEST undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     TEST undo AnAgentAsksToUndoARefundSoonEnough
 *     TEST undo AnAgentAsksToUndoARefundTooLate
 *     TEST undo AnAgentAsksToUndoACashoutCharge
 *     TEST undo AnAgentAsksToUndoACashinPayment
 *     TEST undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     TEST undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     TEST undo ACashierReversesATransactionWithInsufficientFunds
 *     TEST transact ACashierAsksToChargeSomeonePayingWithCreditLine
 *     TEST transact ACashierAsksToRefundSomeone
 */
function weMessageToMemberWithSubs($index, $id, $subs) {return t\weMessage($index, $id, $subs);}

/**
 * these (ARG): (ARG)
 *
 * in: MAKE joint Setup
 *     MAKE aaPayTwice Setup
 *     MAKE identify Setup
 *     MAKE startup Setup
 *     MAKE exchange Setup
 *     MAKE time Setup
 *     MAKE offline Setup
 *     MAKE offline ACashierChargedSomeoneOfflineAndTheyHaveInsufficientBalance
 *     BOTH offline ACashierCanceledOfflineASupposedlyOfflineChargeThatActuallyWentThroughButCustomerIsBroke
 *     MAKE coupons Setup
 *     TEST coupons AMemberRedeemsADiscountCoupon
 *     MAKE undo Setup
 *     MAKE undo AnAgentAsksToUndoACharge
 *     MAKE undo AnAgentAsksToUndoAChargeWhenBalanceIsSecret
 *     MAKE undo AnAgentAsksToUndoARefundSoonEnough
 *     MAKE undo AnAgentAsksToUndoARefundTooLate
 *     MAKE undo AnAgentAsksToUndoACashoutCharge
 *     MAKE undo AnAgentAsksToUndoACashinPayment
 *     MAKE undo AnAgentAsksToUndoAChargeWithInsufficientBalance
 *     MAKE undo AnAgentAsksToUndoARefundWithInsufficientBalance
 *     MAKE undo AnAgentAsksToUndoAChargeWithoutPermission
 *     MAKE undo AnAgentAsksToUndoARefundWithoutPermission
 *     BOTH undo ACashierReversesATransactionWithInsufficientFunds
 *     MAKE transact Setup
 */
function these($thing, $list) {return t\these($thing, $list);}

/**
 * cron runs (ARG)
 *
 * in: MAKE transact CashierAsksToChargeSixNinetynine
 */
function cronRuns($op) {return t\cronRuns($op);}
